// TypeOrm (prisma)
generator client {
  provider = "prisma-client-js"
}

// Provider (banco de dados = mongodb) Url (string de conexão com o banco de dados)
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Tipos de permissões no sistema 
enum userPermissions {
  USER
  ADMIN
  OWNER
}

// Tipos de gêneros
enum userGender {
  MALE
  FEMALE
  NOTINFORM
}

// Tipos de status de order
enum orderStatus {
  PENDING
  APPROVED
  DENIED
}

// Tipos de status de pagamento
enum paymentStatus {
  PENDING_PAYMENT
  CONFIRMED
  CANCELLED
  REFUNDED
}

// Tabela usuário (e seus atributos)
model user {
  // identificador do usuário
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // atributos obrigatórios
  name         String
  email        String          @unique
  password     String
  age          Int
  role         userPermissions @default(USER)
  address      String
  cep          String
  cpf          String
  gender       userGender
  profileImage String

  // dados opcionais
  latitude           Float?
  longitude          Float?
  resetToken         String?
  resetTokenExpired  DateTime?
  loginAttempts      Int?
  lockAccount        DateTime?
  twoFactorSecret    String?
  isTwoFactorEnabled Boolean   @default(false)
  accountBlock       Boolean   @default(false)

  // relacionamentos
  refreshToken      refreshToken[] @relation("user-refreshToken")
  solicitationOwner order[]        @relation("user-order")
  soccer            soccer[]       @relation("user-owner-soccer")
  ratingsGiven      rating[]       @relation("UserRatingsGiven")
  ratingsReceived   rating[]       @relation("UserRatingsReceived")
  sender            message[]
  reservation       reservation[]

  // criação e updated
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // nome da tabela no banco de dados (mongodb)
  @@map("_Users_")
}

// Tabela de RefreshToken
model refreshToken {
  // identificador do refreshToken
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // atributos
  userRole userPermissions
  userId   String          @db.ObjectId
  user     user            @relation("user-refreshToken", fields: [userId], references: [id], onDelete: Cascade)

  // criação e updated
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // nome da tabela no banco de dados (mongodb)
  @@map("_RefreshToken_")
}

model order {
  // identificador da solicitação para cargo de proprietario
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // atributos
  localName   String
  description String
  cnpj        String
  fone        String
  status      orderStatus @default(PENDING)
  userId      String      @db.ObjectId
  user        user        @relation("user-order", fields: [userId], references: [id], onDelete: Cascade)

  // criação e updated
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // nome da tabela no banco de dados (mongodb)
  @@map("_Order_")
}

model soccer {
  // identificador da quadra
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // atributos
  name          String
  description   String
  cep           String
  address       String
  city          String
  state         String
  cnpj          String
  fone          String
  operationDays String[]
  openHour      String
  closingHour   String
  priceHour     Float
  maxDuration   Int
  isActive      Boolean  @default(true)
  user          user     @relation("user-owner-soccer", fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @unique @db.ObjectId
  userName      String

  // opcionais
  latitude     Float?
  longitude    Float?
  observations String?

  // relacionamentos
  ratings     rating[]
  reservation reservation[]

  // criação e updated
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // nome da tabela no banco de dados (mongodb)
  @@map("_Soccer_")
}

// Tabela de rating
model rating {
  // identificador
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // atributos
  rating   Float
  comments String?

  // relacionamento com usuário
  userId String @db.ObjectId
  user   user   @relation("UserRatingsGiven", fields: [userId], references: [id])

  // relacionamento com a quadra
  soccerId String? @db.ObjectId
  soccer   soccer? @relation(fields: [soccerId], references: [id])

  // relacionamento com o usuário avaliado
  ratedUserId String? @db.ObjectId
  retedUser   user?   @relation("UserRatingsReceived", fields: [ratedUserId], references: [id])

  // criação
  created_at DateTime @default(now())

  @@unique([userId, soccerId])
  @@map("_Rating_")
}

model chat {
  // identificador
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // atributos
  participantIds String[] @db.ObjectId

  // relação com a tabela mensagens
  messages message[]

  // criação de atualização
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // definindo indice por id dos participantes, assim tendo melhor performance do banco de dados
  @@index([participantIds])
  // nome da tabela no banco de dados
  @@map("_Chat_")
}

// tabela message
model message {
  // identificador 
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // atributos
  content String

  // relacionamento com usuário
  senderId String @db.ObjectId
  sender   user   @relation(fields: [senderId], references: [id])

  // relacionamento com o chat
  chatId String @db.ObjectId
  chat   chat   @relation(fields: [chatId], references: [id])

  // quando a mensagem foi enviada
  created_at DateTime @default(now())

  // nome da tabela no mongodb atlas
  @@map("_Message_")
}

// tabela reservas
model reservation {
  // identificador
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // atributos
  startTime     DateTime
  endTime       DateTime
  statusPayment paymentStatus @default(PENDING_PAYMENT)
  expiredIn     DateTime
  totalPrice    Float
  duration      Int

  // opcionais
  paymentTransactionId String?
  paymentReceivedAt    DateTime?

  // relacionamentos

  // soccer
  soccer   soccer @relation(fields: [soccerId], references: [id])
  soccerId String @db.ObjectId

  // user
  user   user   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  // criação e update
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // nome da tabela
  @@map("_Reservation_")
}
